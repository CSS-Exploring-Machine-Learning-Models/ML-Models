# -*- coding: utf-8 -*-
"""Decision_Tree_Model_Johnny_Garcia

Automatically generated by Colab.

#  **Decision Tree Model**

##  **Data Preprocessing**

## **Load the Dataset**
"""

import pandas as pd
df = pd.read_csv('Salary Data.csv')

"""## **Inspect the Dataset**"""

df.head()

df.info()

"""# **Data Cleaning**

## **Fixing Column Name Inconsistency**
"""

df.columns

"""#### Convert to Lowercase:"""

df.columns = df.columns.str.lower()
df.columns

"""#### Replace Spaces with Underscores:"""

df.columns = df.columns.str.replace(' ', '_')
df.columns

"""Verify Changes:
After renaming, recheck the column names to ensure that the changes have been applied correctly.
"""

df.columns

"""## **Fix Data Mis-types**

#### **Uncovering Unexpected Characters in Numeric Columns**
"""

df['age'].unique()

df['salary'].unique()

df['years_of_experience'].unique()

"""## **Check for Missing Values**

### Using Pandas Methods
"""

df.isnull().sum()

"""### Using Missingno (missingno matrix)

"""

!pip install missingno --quiet
import missingno as msno

# Visualize the completeness of the dataframe

msno.matrix(df)

"""### **Remove rows with missing data**"""

# Count the number of rows before removing empty rows
rows_before = len(df)

# Remove empty rows
df = df.dropna(axis=0, how='all')

# Reset the index
df = df.reset_index(drop=True)

# Count the number of rows after removing empty rows
rows_after = len(df)

# Calculate the number of rows removed
rows_removed = rows_before - rows_after

# Print the number of rows removed
print(f"Number of empty rows removed: {rows_removed}")

"""---

###  Create a Copy of the Original DataFrame


"""

df_cleaned = df.copy()

df_cleaned.info()

df_cleaned = df_cleaned.drop(columns=['job_title'])

df_cleaned.info()

"""# **Data Transformation**

## One-Hot Encoding for Categorical Variables
"""

from sklearn.preprocessing import OneHotEncoder

# Initialize the OneHotEncoder
encoder = OneHotEncoder(sparse_output=False, drop='first')

df_cleaned

# Select categorical columns using select_dtypes
categorical_cols = df_cleaned.select_dtypes(include=['object']).columns
categorical_cols

# Fit and transform the selected columns
encoded_cols = encoder.fit_transform(df_cleaned[categorical_cols])
encoded_cols

# Get the feature names for the one-hot encoded columns
encoded_feature_name = encoder.get_feature_names_out(input_features=categorical_cols)

# Create a DataFrame with the encoded columns
encoded_df = pd.DataFrame(encoded_cols, columns=encoded_feature_name)

encoded_df

# Concatenate the original DataFrame and the encoded DataFrame
df_cleaned_encoded = pd.concat([df_cleaned, encoded_df], axis=1)

df_cleaned_encoded

df_cleaned_encoded = df_cleaned_encoded.drop(categorical_cols, axis=1)
df_cleaned_encoded.head()

df_cleaned_encoded.info()

# Save the final preprocessed data to a CSV file
df_cleaned_encoded.to_csv('SD_Preprocessed.csv', index=False)

"""Import the Necessary Libraries and Load the Dataset
In a Google Colab cell, run:
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor

# Load the dataset

df = pd.read_csv("SD_Preprocessed.csv")

df.head()

df.info()

"""Data Preparation
Separate the features and the target variable.
"""

# Features and target separation
X = df.drop('salary', axis=1)
y = df['salary']

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""Train the Decision Tree"""

# Initialize the Decision Tree Regressor
model = DecisionTreeRegressor()

model.fit(X_train, y_train)

"""Evaluate the performance of the model."""

from sklearn.metrics import mean_squared_error, r2_score, explained_variance_score

# Predictions on testing data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
explained_variance = explained_variance_score(y_test, y_pred)

# Print the evaluation metrics
print("Mean Squared Error:", mse)
print("R-squared (R2):", r2)
print("Explained Variance Score:", explained_variance)
